--
-- PostgreSQL database dump
--

SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: postgres
--

CREATE PROCEDURAL LANGUAGE plpgsql;


SET search_path = public, pg_catalog;

--
-- Name: gtsq; Type: SHELL TYPE; Schema: public; Owner: maxcom
--

CREATE TYPE gtsq;


--
-- Name: gtsq_in(cstring); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gtsq_in(cstring) RETURNS gtsq
    AS '$libdir/tsearch2', 'gtsq_in'
    LANGUAGE c STRICT;


ALTER FUNCTION public.gtsq_in(cstring) OWNER TO maxcom;

--
-- Name: gtsq_out(gtsq); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gtsq_out(gtsq) RETURNS cstring
    AS '$libdir/tsearch2', 'gtsq_out'
    LANGUAGE c STRICT;


ALTER FUNCTION public.gtsq_out(gtsq) OWNER TO maxcom;

--
-- Name: gtsq; Type: TYPE; Schema: public; Owner: maxcom
--

CREATE TYPE gtsq (
    INTERNALLENGTH = 8,
    INPUT = gtsq_in,
    OUTPUT = gtsq_out,
    ALIGNMENT = int4,
    STORAGE = plain
);


ALTER TYPE public.gtsq OWNER TO maxcom;

--
-- Name: gtsvector; Type: SHELL TYPE; Schema: public; Owner: maxcom
--

CREATE TYPE gtsvector;


--
-- Name: gtsvector_in(cstring); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gtsvector_in(cstring) RETURNS gtsvector
    AS '$libdir/tsearch2', 'gtsvector_in'
    LANGUAGE c STRICT;


ALTER FUNCTION public.gtsvector_in(cstring) OWNER TO maxcom;

--
-- Name: gtsvector_out(gtsvector); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gtsvector_out(gtsvector) RETURNS cstring
    AS '$libdir/tsearch2', 'gtsvector_out'
    LANGUAGE c STRICT;


ALTER FUNCTION public.gtsvector_out(gtsvector) OWNER TO maxcom;

--
-- Name: gtsvector; Type: TYPE; Schema: public; Owner: maxcom
--

CREATE TYPE gtsvector (
    INTERNALLENGTH = variable,
    INPUT = gtsvector_in,
    OUTPUT = gtsvector_out,
    ALIGNMENT = int4,
    STORAGE = plain
);


ALTER TYPE public.gtsvector OWNER TO maxcom;

--
-- Name: tsquery; Type: SHELL TYPE; Schema: public; Owner: maxcom
--

CREATE TYPE tsquery;


--
-- Name: tsquery_in(cstring); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsquery_in(cstring) RETURNS tsquery
    AS '$libdir/tsearch2', 'tsquery_in'
    LANGUAGE c STRICT;


ALTER FUNCTION public.tsquery_in(cstring) OWNER TO maxcom;

--
-- Name: tsquery_out(tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsquery_out(tsquery) RETURNS cstring
    AS '$libdir/tsearch2', 'tsquery_out'
    LANGUAGE c STRICT;


ALTER FUNCTION public.tsquery_out(tsquery) OWNER TO maxcom;

--
-- Name: tsquery; Type: TYPE; Schema: public; Owner: maxcom
--

CREATE TYPE tsquery (
    INTERNALLENGTH = variable,
    INPUT = tsquery_in,
    OUTPUT = tsquery_out,
    ALIGNMENT = int4,
    STORAGE = plain
);


ALTER TYPE public.tsquery OWNER TO maxcom;

--
-- Name: tsvector; Type: SHELL TYPE; Schema: public; Owner: maxcom
--

CREATE TYPE tsvector;


--
-- Name: tsvector_in(cstring); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsvector_in(cstring) RETURNS tsvector
    AS '$libdir/tsearch2', 'tsvector_in'
    LANGUAGE c STRICT;


ALTER FUNCTION public.tsvector_in(cstring) OWNER TO maxcom;

--
-- Name: tsvector_out(tsvector); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsvector_out(tsvector) RETURNS cstring
    AS '$libdir/tsearch2', 'tsvector_out'
    LANGUAGE c STRICT;


ALTER FUNCTION public.tsvector_out(tsvector) OWNER TO maxcom;

--
-- Name: tsvector; Type: TYPE; Schema: public; Owner: maxcom
--

CREATE TYPE tsvector (
    INTERNALLENGTH = variable,
    INPUT = tsvector_in,
    OUTPUT = tsvector_out,
    ALIGNMENT = int4,
    STORAGE = extended
);


ALTER TYPE public.tsvector OWNER TO maxcom;

--
-- Name: statinfo; Type: TYPE; Schema: public; Owner: maxcom
--

CREATE TYPE statinfo AS (
	word text,
	ndoc integer,
	nentry integer
);


ALTER TYPE public.statinfo OWNER TO maxcom;

--
-- Name: tokenout; Type: TYPE; Schema: public; Owner: maxcom
--

CREATE TYPE tokenout AS (
	tokid integer,
	token text
);


ALTER TYPE public.tokenout OWNER TO maxcom;

--
-- Name: tokentype; Type: TYPE; Schema: public; Owner: maxcom
--

CREATE TYPE tokentype AS (
	tokid integer,
	alias text,
	descr text
);


ALTER TYPE public.tokentype OWNER TO maxcom;

--
-- Name: tsdebug; Type: TYPE; Schema: public; Owner: maxcom
--

CREATE TYPE tsdebug AS (
	ts_name text,
	tok_type text,
	description text,
	token text,
	dict_name text[],
	tsvector tsvector
);


ALTER TYPE public.tsdebug OWNER TO maxcom;

--
-- Name: _get_parser_from_curcfg(); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION _get_parser_from_curcfg() RETURNS text
    AS $$ select prs_name from pg_ts_cfg where oid = show_curcfg() $$
    LANGUAGE sql IMMUTABLE STRICT;


ALTER FUNCTION public._get_parser_from_curcfg() OWNER TO maxcom;

--
-- Name: check_replyto(); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION check_replyto() RETURNS "trigger"
    AS $$
BEGIN
IF NEW.replyto IS NOT NULL AND NOT NEW.deleted  THEN
IF NOT EXISTS (SELECT id FROM comments WHERE NEW.replyto=comments.id AND not comments.deleted) THEN
RAISE EXCEPTION 'reply to deleted comment denied';
end if;
end if;
return NEW;
end;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.check_replyto() OWNER TO maxcom;

--
-- Name: comins(); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION comins() RETURNS "trigger"
    AS $$
DECLARE
        group int;
        thetopic topics%ROWTYPE;
BEGIN
        SELECT * INTO thetopic FROM topics WHERE topics.id = NEW.topic FOR UPDATE;
        SELECT groupid INTO group FROM topics WHERE topics.id = NEW.topic FOR UPDATE;
        UPDATE topics SET stat1=stat1+1,stat2=stat2+1,stat3=stat3+1,stat4=stat4+1,lastmod=CURRENT_TIMESTAMP WHERE topics.id = NEW.topic;
        UPDATE groups SET stat1=stat1+1,stat2=stat2+1,stat3=stat3+1,stat4=stat4+1 WHERE id = group;
        RETURN NULL;
END;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.comins() OWNER TO maxcom;

--
-- Name: concat(tsvector, tsvector); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION concat(tsvector, tsvector) RETURNS tsvector
    AS '$libdir/tsearch2', 'concat'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.concat(tsvector, tsvector) OWNER TO maxcom;

--
-- Name: dex_init(internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION dex_init(internal) RETURNS internal
    AS '$libdir/tsearch2', 'dex_init'
    LANGUAGE c;


ALTER FUNCTION public.dex_init(internal) OWNER TO maxcom;

--
-- Name: dex_lexize(internal, internal, integer); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION dex_lexize(internal, internal, integer) RETURNS internal
    AS '$libdir/tsearch2', 'dex_lexize'
    LANGUAGE c STRICT;


ALTER FUNCTION public.dex_lexize(internal, internal, integer) OWNER TO maxcom;

--
-- Name: exectsq(tsvector, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION exectsq(tsvector, tsquery) RETURNS boolean
    AS '$libdir/tsearch2', 'exectsq'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.exectsq(tsvector, tsquery) OWNER TO maxcom;

--
-- Name: FUNCTION exectsq(tsvector, tsquery); Type: COMMENT; Schema: public; Owner: maxcom
--

COMMENT ON FUNCTION exectsq(tsvector, tsquery) IS 'boolean operation with text index';


--
-- Name: get_covers(tsvector, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION get_covers(tsvector, tsquery) RETURNS text
    AS '$libdir/tsearch2', 'get_covers'
    LANGUAGE c STRICT;


ALTER FUNCTION public.get_covers(tsvector, tsquery) OWNER TO maxcom;

--
-- Name: get_title(bigint); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION get_title(bigint) RETURNS character varying
    AS $_$select title from comments where id=$1 union select title from topics where id=$1$_$
    LANGUAGE sql;


ALTER FUNCTION public.get_title(bigint) OWNER TO maxcom;

--
-- Name: gin_extract_tsquery(tsquery, internal, internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gin_extract_tsquery(tsquery, internal, internal) RETURNS internal
    AS '$libdir/tsearch2', 'gin_extract_tsquery'
    LANGUAGE c STRICT;


ALTER FUNCTION public.gin_extract_tsquery(tsquery, internal, internal) OWNER TO maxcom;

--
-- Name: gin_extract_tsvector(tsvector, internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gin_extract_tsvector(tsvector, internal) RETURNS internal
    AS '$libdir/tsearch2', 'gin_extract_tsvector'
    LANGUAGE c STRICT;


ALTER FUNCTION public.gin_extract_tsvector(tsvector, internal) OWNER TO maxcom;

--
-- Name: gin_ts_consistent(internal, internal, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gin_ts_consistent(internal, internal, tsquery) RETURNS boolean
    AS '$libdir/tsearch2', 'gin_ts_consistent'
    LANGUAGE c STRICT;


ALTER FUNCTION public.gin_ts_consistent(internal, internal, tsquery) OWNER TO maxcom;

--
-- Name: gtsq_compress(internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gtsq_compress(internal) RETURNS internal
    AS '$libdir/tsearch2', 'gtsq_compress'
    LANGUAGE c;


ALTER FUNCTION public.gtsq_compress(internal) OWNER TO maxcom;

--
-- Name: gtsq_consistent(gtsq, internal, integer); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gtsq_consistent(gtsq, internal, integer) RETURNS boolean
    AS '$libdir/tsearch2', 'gtsq_consistent'
    LANGUAGE c;


ALTER FUNCTION public.gtsq_consistent(gtsq, internal, integer) OWNER TO maxcom;

--
-- Name: gtsq_decompress(internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gtsq_decompress(internal) RETURNS internal
    AS '$libdir/tsearch2', 'gtsq_decompress'
    LANGUAGE c;


ALTER FUNCTION public.gtsq_decompress(internal) OWNER TO maxcom;

--
-- Name: gtsq_penalty(internal, internal, internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gtsq_penalty(internal, internal, internal) RETURNS internal
    AS '$libdir/tsearch2', 'gtsq_penalty'
    LANGUAGE c STRICT;


ALTER FUNCTION public.gtsq_penalty(internal, internal, internal) OWNER TO maxcom;

--
-- Name: gtsq_picksplit(internal, internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gtsq_picksplit(internal, internal) RETURNS internal
    AS '$libdir/tsearch2', 'gtsq_picksplit'
    LANGUAGE c;


ALTER FUNCTION public.gtsq_picksplit(internal, internal) OWNER TO maxcom;

--
-- Name: gtsq_same(gtsq, gtsq, internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gtsq_same(gtsq, gtsq, internal) RETURNS internal
    AS '$libdir/tsearch2', 'gtsq_same'
    LANGUAGE c;


ALTER FUNCTION public.gtsq_same(gtsq, gtsq, internal) OWNER TO maxcom;

--
-- Name: gtsq_union(bytea, internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gtsq_union(bytea, internal) RETURNS integer[]
    AS '$libdir/tsearch2', 'gtsq_union'
    LANGUAGE c;


ALTER FUNCTION public.gtsq_union(bytea, internal) OWNER TO maxcom;

--
-- Name: gtsvector_compress(internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gtsvector_compress(internal) RETURNS internal
    AS '$libdir/tsearch2', 'gtsvector_compress'
    LANGUAGE c;


ALTER FUNCTION public.gtsvector_compress(internal) OWNER TO maxcom;

--
-- Name: gtsvector_consistent(gtsvector, internal, integer); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gtsvector_consistent(gtsvector, internal, integer) RETURNS boolean
    AS '$libdir/tsearch2', 'gtsvector_consistent'
    LANGUAGE c;


ALTER FUNCTION public.gtsvector_consistent(gtsvector, internal, integer) OWNER TO maxcom;

--
-- Name: gtsvector_decompress(internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gtsvector_decompress(internal) RETURNS internal
    AS '$libdir/tsearch2', 'gtsvector_decompress'
    LANGUAGE c;


ALTER FUNCTION public.gtsvector_decompress(internal) OWNER TO maxcom;

--
-- Name: gtsvector_penalty(internal, internal, internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gtsvector_penalty(internal, internal, internal) RETURNS internal
    AS '$libdir/tsearch2', 'gtsvector_penalty'
    LANGUAGE c STRICT;


ALTER FUNCTION public.gtsvector_penalty(internal, internal, internal) OWNER TO maxcom;

--
-- Name: gtsvector_picksplit(internal, internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gtsvector_picksplit(internal, internal) RETURNS internal
    AS '$libdir/tsearch2', 'gtsvector_picksplit'
    LANGUAGE c;


ALTER FUNCTION public.gtsvector_picksplit(internal, internal) OWNER TO maxcom;

--
-- Name: gtsvector_same(gtsvector, gtsvector, internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gtsvector_same(gtsvector, gtsvector, internal) RETURNS internal
    AS '$libdir/tsearch2', 'gtsvector_same'
    LANGUAGE c;


ALTER FUNCTION public.gtsvector_same(gtsvector, gtsvector, internal) OWNER TO maxcom;

--
-- Name: gtsvector_union(internal, internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION gtsvector_union(internal, internal) RETURNS integer[]
    AS '$libdir/tsearch2', 'gtsvector_union'
    LANGUAGE c;


ALTER FUNCTION public.gtsvector_union(internal, internal) OWNER TO maxcom;

--
-- Name: headline(oid, text, tsquery, text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION headline(oid, text, tsquery, text) RETURNS text
    AS '$libdir/tsearch2', 'headline'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.headline(oid, text, tsquery, text) OWNER TO maxcom;

--
-- Name: headline(oid, text, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION headline(oid, text, tsquery) RETURNS text
    AS '$libdir/tsearch2', 'headline'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.headline(oid, text, tsquery) OWNER TO maxcom;

--
-- Name: headline(text, text, tsquery, text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION headline(text, text, tsquery, text) RETURNS text
    AS '$libdir/tsearch2', 'headline_byname'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.headline(text, text, tsquery, text) OWNER TO maxcom;

--
-- Name: headline(text, text, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION headline(text, text, tsquery) RETURNS text
    AS '$libdir/tsearch2', 'headline_byname'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.headline(text, text, tsquery) OWNER TO maxcom;

--
-- Name: headline(text, tsquery, text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION headline(text, tsquery, text) RETURNS text
    AS '$libdir/tsearch2', 'headline_current'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.headline(text, tsquery, text) OWNER TO maxcom;

--
-- Name: headline(text, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION headline(text, tsquery) RETURNS text
    AS '$libdir/tsearch2', 'headline_current'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.headline(text, tsquery) OWNER TO maxcom;

--
-- Name: length(tsvector); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION length(tsvector) RETURNS integer
    AS '$libdir/tsearch2', 'tsvector_length'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.length(tsvector) OWNER TO maxcom;

--
-- Name: lexize(oid, text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION lexize(oid, text) RETURNS text[]
    AS '$libdir/tsearch2', 'lexize'
    LANGUAGE c STRICT;


ALTER FUNCTION public.lexize(oid, text) OWNER TO maxcom;

--
-- Name: lexize(text, text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION lexize(text, text) RETURNS text[]
    AS '$libdir/tsearch2', 'lexize_byname'
    LANGUAGE c STRICT;


ALTER FUNCTION public.lexize(text, text) OWNER TO maxcom;

--
-- Name: lexize(text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION lexize(text) RETURNS text[]
    AS '$libdir/tsearch2', 'lexize_bycurrent'
    LANGUAGE c STRICT;


ALTER FUNCTION public.lexize(text) OWNER TO maxcom;

--
-- Name: msgdel(); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION msgdel() RETURNS "trigger"
    AS $$
DECLARE
	grid int;
	master groups%ROWTYPE;
	thetopic topics%ROWTYPE;
	thecomment comments%ROWTYPE;
BEGIN
	SELECT * INTO thetopic FROM topics WHERE id = NEW.msgid;
	IF FOUND THEN
		SELECT groupid INTO grid FROM topics WHERE id = NEW.msgid;
		UPDATE groups SET stat1=stat1-1 WHERE id = grid;
	ELSE
		SELECT * INTO thecomment FROM comments WHERE id = NEW.msgid;
		IF FOUND THEN
			SELECT topic INTO grid FROM comments WHERE id = NEW.msgid;
			UPDATE topics SET stat1=stat1-1, lastmod=CURRENT_TIMESTAMP WHERE id = grid;
			SELECT groupid INTO grid FROM topics WHERE id = grid;
			UPDATE groups SET stat1=stat1-1 WHERE id = grid;
		ELSE
			SELECT topic INTO grid FROM comments WHERE id = NEW.msgid;
			UPDATE votenames SET stat1=stat1-1 WHERE topic = grid;
		END IF;
	END IF;
	RETURN NULL;
END;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.msgdel() OWNER TO maxcom;

--
-- Name: msgdel2(); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION msgdel2() RETURNS opaque
    AS $$
DECLARE
	grid int;
	master groups%ROWTYPE;
BEGIN
	SELECT groupid INTO grid FROM messages WHERE messages.id = NEW.msgid;
	UPDATE groups SET stat1=stat1-1 WHERE groups.id = grid;
	SELECT * INTO master FROM groups WHERE id = grid;
	IF master.section = 0 THEN
		SELECT * FROM groups INTO master WHERE groups.id = (SELECT DISTINCT(messages.groupid) FROM messages, groups WHERE messages.comment_guid = master.id);
	END IF;
	UPDATE group_stat SET stat1=stat1-1 WHERE groupid = master.id;
	RETURN NULL;
END;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.msgdel2() OWNER TO maxcom;

--
-- Name: msgins(); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION msgins() RETURNS "trigger"
    AS $$ BEGIN NEW.idxFTI := to_tsvector ('utf8_russian', coalesce(get_title(NEW.id),'') ||' '|| coalesce(NEW.message,'')); RETURN NEW;  END;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.msgins() OWNER TO maxcom;

--
-- Name: numnode(tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION numnode(tsquery) RETURNS integer
    AS '$libdir/tsearch2', 'tsquery_numnode'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.numnode(tsquery) OWNER TO maxcom;

--
-- Name: parse(oid, text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION parse(oid, text) RETURNS SETOF tokenout
    AS '$libdir/tsearch2', 'parse'
    LANGUAGE c STRICT;


ALTER FUNCTION public.parse(oid, text) OWNER TO maxcom;

--
-- Name: parse(text, text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION parse(text, text) RETURNS SETOF tokenout
    AS '$libdir/tsearch2', 'parse_byname'
    LANGUAGE c STRICT;


ALTER FUNCTION public.parse(text, text) OWNER TO maxcom;

--
-- Name: parse(text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION parse(text) RETURNS SETOF tokenout
    AS '$libdir/tsearch2', 'parse_current'
    LANGUAGE c STRICT;


ALTER FUNCTION public.parse(text) OWNER TO maxcom;

--
-- Name: plainto_tsquery(oid, text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION plainto_tsquery(oid, text) RETURNS tsquery
    AS '$libdir/tsearch2', 'plainto_tsquery'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.plainto_tsquery(oid, text) OWNER TO maxcom;

--
-- Name: plainto_tsquery(text, text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION plainto_tsquery(text, text) RETURNS tsquery
    AS '$libdir/tsearch2', 'plainto_tsquery_name'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.plainto_tsquery(text, text) OWNER TO maxcom;

--
-- Name: plainto_tsquery(text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION plainto_tsquery(text) RETURNS tsquery
    AS '$libdir/tsearch2', 'plainto_tsquery_current'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.plainto_tsquery(text) OWNER TO maxcom;

--
-- Name: plpgsql_call_handler(); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION plpgsql_call_handler() RETURNS language_handler
    AS '/usr/lib/pgsql/plpgsql.so', 'plpgsql_call_handler'
    LANGUAGE c;


ALTER FUNCTION public.plpgsql_call_handler() OWNER TO maxcom;

--
-- Name: prsd_end(internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION prsd_end(internal) RETURNS void
    AS '$libdir/tsearch2', 'prsd_end'
    LANGUAGE c;


ALTER FUNCTION public.prsd_end(internal) OWNER TO maxcom;

--
-- Name: prsd_getlexeme(internal, internal, internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION prsd_getlexeme(internal, internal, internal) RETURNS integer
    AS '$libdir/tsearch2', 'prsd_getlexeme'
    LANGUAGE c;


ALTER FUNCTION public.prsd_getlexeme(internal, internal, internal) OWNER TO maxcom;

--
-- Name: prsd_headline(internal, internal, internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION prsd_headline(internal, internal, internal) RETURNS internal
    AS '$libdir/tsearch2', 'prsd_headline'
    LANGUAGE c;


ALTER FUNCTION public.prsd_headline(internal, internal, internal) OWNER TO maxcom;

--
-- Name: prsd_lextype(internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION prsd_lextype(internal) RETURNS internal
    AS '$libdir/tsearch2', 'prsd_lextype'
    LANGUAGE c;


ALTER FUNCTION public.prsd_lextype(internal) OWNER TO maxcom;

--
-- Name: prsd_start(internal, integer); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION prsd_start(internal, integer) RETURNS internal
    AS '$libdir/tsearch2', 'prsd_start'
    LANGUAGE c;


ALTER FUNCTION public.prsd_start(internal, integer) OWNER TO maxcom;

--
-- Name: querytree(tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION querytree(tsquery) RETURNS text
    AS '$libdir/tsearch2', 'tsquerytree'
    LANGUAGE c STRICT;


ALTER FUNCTION public.querytree(tsquery) OWNER TO maxcom;

--
-- Name: rank(real[], tsvector, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION rank(real[], tsvector, tsquery) RETURNS real
    AS '$libdir/tsearch2', 'rank'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.rank(real[], tsvector, tsquery) OWNER TO maxcom;

--
-- Name: rank(real[], tsvector, tsquery, integer); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION rank(real[], tsvector, tsquery, integer) RETURNS real
    AS '$libdir/tsearch2', 'rank'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.rank(real[], tsvector, tsquery, integer) OWNER TO maxcom;

--
-- Name: rank(tsvector, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION rank(tsvector, tsquery) RETURNS real
    AS '$libdir/tsearch2', 'rank_def'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.rank(tsvector, tsquery) OWNER TO maxcom;

--
-- Name: rank(tsvector, tsquery, integer); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION rank(tsvector, tsquery, integer) RETURNS real
    AS '$libdir/tsearch2', 'rank_def'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.rank(tsvector, tsquery, integer) OWNER TO maxcom;

--
-- Name: rank_cd(real[], tsvector, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION rank_cd(real[], tsvector, tsquery) RETURNS real
    AS '$libdir/tsearch2', 'rank_cd'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.rank_cd(real[], tsvector, tsquery) OWNER TO maxcom;

--
-- Name: rank_cd(real[], tsvector, tsquery, integer); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION rank_cd(real[], tsvector, tsquery, integer) RETURNS real
    AS '$libdir/tsearch2', 'rank_cd'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.rank_cd(real[], tsvector, tsquery, integer) OWNER TO maxcom;

--
-- Name: rank_cd(tsvector, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION rank_cd(tsvector, tsquery) RETURNS real
    AS '$libdir/tsearch2', 'rank_cd_def'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.rank_cd(tsvector, tsquery) OWNER TO maxcom;

--
-- Name: rank_cd(tsvector, tsquery, integer); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION rank_cd(tsvector, tsquery, integer) RETURNS real
    AS '$libdir/tsearch2', 'rank_cd_def'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.rank_cd(tsvector, tsquery, integer) OWNER TO maxcom;

--
-- Name: reset_tsearch(); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION reset_tsearch() RETURNS void
    AS '$libdir/tsearch2', 'reset_tsearch'
    LANGUAGE c STRICT;


ALTER FUNCTION public.reset_tsearch() OWNER TO maxcom;

--
-- Name: rewrite(tsquery, text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION rewrite(tsquery, text) RETURNS tsquery
    AS '$libdir/tsearch2', 'tsquery_rewrite'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.rewrite(tsquery, text) OWNER TO maxcom;

--
-- Name: rewrite(tsquery, tsquery, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION rewrite(tsquery, tsquery, tsquery) RETURNS tsquery
    AS '$libdir/tsearch2', 'tsquery_rewrite_query'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.rewrite(tsquery, tsquery, tsquery) OWNER TO maxcom;

--
-- Name: rewrite_accum(tsquery, tsquery[]); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION rewrite_accum(tsquery, tsquery[]) RETURNS tsquery
    AS '$libdir/tsearch2', 'rewrite_accum'
    LANGUAGE c;


ALTER FUNCTION public.rewrite_accum(tsquery, tsquery[]) OWNER TO maxcom;

--
-- Name: rewrite_finish(tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION rewrite_finish(tsquery) RETURNS tsquery
    AS '$libdir/tsearch2', 'rewrite_finish'
    LANGUAGE c;


ALTER FUNCTION public.rewrite_finish(tsquery) OWNER TO maxcom;

--
-- Name: rexectsq(tsquery, tsvector); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION rexectsq(tsquery, tsvector) RETURNS boolean
    AS '$libdir/tsearch2', 'rexectsq'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.rexectsq(tsquery, tsvector) OWNER TO maxcom;

--
-- Name: FUNCTION rexectsq(tsquery, tsvector); Type: COMMENT; Schema: public; Owner: maxcom
--

COMMENT ON FUNCTION rexectsq(tsquery, tsvector) IS 'boolean operation with text index';


--
-- Name: set_curcfg(integer); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION set_curcfg(integer) RETURNS void
    AS '$libdir/tsearch2', 'set_curcfg'
    LANGUAGE c STRICT;


ALTER FUNCTION public.set_curcfg(integer) OWNER TO maxcom;

--
-- Name: set_curcfg(text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION set_curcfg(text) RETURNS void
    AS '$libdir/tsearch2', 'set_curcfg_byname'
    LANGUAGE c STRICT;


ALTER FUNCTION public.set_curcfg(text) OWNER TO maxcom;

--
-- Name: set_curdict(integer); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION set_curdict(integer) RETURNS void
    AS '$libdir/tsearch2', 'set_curdict'
    LANGUAGE c STRICT;


ALTER FUNCTION public.set_curdict(integer) OWNER TO maxcom;

--
-- Name: set_curdict(text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION set_curdict(text) RETURNS void
    AS '$libdir/tsearch2', 'set_curdict_byname'
    LANGUAGE c STRICT;


ALTER FUNCTION public.set_curdict(text) OWNER TO maxcom;

--
-- Name: set_curprs(integer); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION set_curprs(integer) RETURNS void
    AS '$libdir/tsearch2', 'set_curprs'
    LANGUAGE c STRICT;


ALTER FUNCTION public.set_curprs(integer) OWNER TO maxcom;

--
-- Name: set_curprs(text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION set_curprs(text) RETURNS void
    AS '$libdir/tsearch2', 'set_curprs_byname'
    LANGUAGE c STRICT;


ALTER FUNCTION public.set_curprs(text) OWNER TO maxcom;

--
-- Name: setweight(tsvector, "char"); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION setweight(tsvector, "char") RETURNS tsvector
    AS '$libdir/tsearch2', 'setweight'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.setweight(tsvector, "char") OWNER TO maxcom;

--
-- Name: show_curcfg(); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION show_curcfg() RETURNS oid
    AS '$libdir/tsearch2', 'show_curcfg'
    LANGUAGE c STRICT;


ALTER FUNCTION public.show_curcfg() OWNER TO maxcom;

--
-- Name: snb_en_init(internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION snb_en_init(internal) RETURNS internal
    AS '$libdir/tsearch2', 'snb_en_init'
    LANGUAGE c;


ALTER FUNCTION public.snb_en_init(internal) OWNER TO maxcom;

--
-- Name: snb_lexize(internal, internal, integer); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION snb_lexize(internal, internal, integer) RETURNS internal
    AS '$libdir/tsearch2', 'snb_lexize'
    LANGUAGE c STRICT;


ALTER FUNCTION public.snb_lexize(internal, internal, integer) OWNER TO maxcom;

--
-- Name: snb_ru_init_koi8(internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION snb_ru_init_koi8(internal) RETURNS internal
    AS '$libdir/tsearch2', 'snb_ru_init_koi8'
    LANGUAGE c;


ALTER FUNCTION public.snb_ru_init_koi8(internal) OWNER TO maxcom;

--
-- Name: snb_ru_init_utf8(internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION snb_ru_init_utf8(internal) RETURNS internal
    AS '$libdir/tsearch2', 'snb_ru_init_utf8'
    LANGUAGE c;


ALTER FUNCTION public.snb_ru_init_utf8(internal) OWNER TO maxcom;

--
-- Name: spell_init(internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION spell_init(internal) RETURNS internal
    AS '$libdir/tsearch2', 'spell_init'
    LANGUAGE c;


ALTER FUNCTION public.spell_init(internal) OWNER TO maxcom;

--
-- Name: spell_lexize(internal, internal, integer); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION spell_lexize(internal, internal, integer) RETURNS internal
    AS '$libdir/tsearch2', 'spell_lexize'
    LANGUAGE c STRICT;


ALTER FUNCTION public.spell_lexize(internal, internal, integer) OWNER TO maxcom;

--
-- Name: stat(text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION stat(text) RETURNS SETOF statinfo
    AS '$libdir/tsearch2', 'ts_stat'
    LANGUAGE c STRICT;


ALTER FUNCTION public.stat(text) OWNER TO maxcom;

--
-- Name: stat(text, text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION stat(text, text) RETURNS SETOF statinfo
    AS '$libdir/tsearch2', 'ts_stat'
    LANGUAGE c STRICT;


ALTER FUNCTION public.stat(text, text) OWNER TO maxcom;

--
-- Name: stat_update(); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION stat_update() RETURNS timestamp with time zone
    AS $$
DECLARE
	top record;
	st1 int;
	st2 int;
	st3 int;
	st4 int;
	now timestamp;
BEGIN
	now=CURRENT_TIMESTAMP;
	FOR top IN SELECT id FROM topics WHERE stat2!=0 FOR UPDATE LOOP
		SELECT count(*) INTO st1 FROM comments WHERE topic = top.id AND NOT deleted;
		SELECT count(*) INTO st2 FROM comments WHERE topic = top.id AND now-'3 day'::interval<postdate AND NOT deleted;
		SELECT count(*) INTO st3 FROM comments WHERE topic = top.id AND now-'1 day'::interval<postdate AND NOT deleted;
		SELECT count(*) INTO st4 FROM comments WHERE topic = top.id AND now-'1 hour'::interval<postdate AND NOT deleted;
		UPDATE topics SET stat1 = st1,stat2 = st2,stat3 = st3,stat4 = st4 WHERE id = top.id AND (stat1 != st1 OR stat2 != st2 OR stat3 != st3 OR stat4 != st4 );
	END LOOP;
	RETURN now;
END;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.stat_update() OWNER TO maxcom;

--
-- Name: stat_update2(); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION stat_update2() RETURNS timestamp with time zone
    AS $$
DECLARE
	grp record;
	st1 int;
	st2 int;
	st3 int;
	st4 int;
	t1 int;
	t2 int;
	t3 int;
	t4 int;
	now timestamp;
BEGIN
	now=CURRENT_TIMESTAMP;
	FOR grp IN SELECT id FROM groups WHERE stat2!=0 FOR UPDATE LOOP
		SELECT sum(stat1) INTO st1 FROM topics WHERE groupid = grp.id AND NOT deleted;
		SELECT sum(stat2) INTO st2 FROM topics WHERE groupid = grp.id AND NOT deleted;
		SELECT sum(stat3) INTO st3 FROM topics WHERE groupid = grp.id AND NOT deleted;
		SELECT sum(stat4) INTO st4 FROM topics WHERE groupid = grp.id AND NOT deleted;
		SELECT count(*) INTO t1 FROM topics WHERE groupid = grp.id AND NOT deleted;
		SELECT count(*) INTO t2 FROM topics WHERE groupid = grp.id AND now-'3 day'::interval<postdate AND NOT deleted;
		SELECT count(*) INTO t3 FROM topics WHERE groupid = grp.id AND now-'1 day'::interval<postdate AND NOT deleted;
		SELECT count(*) INTO t4 FROM topics WHERE groupid = grp.id AND now-'1 hour'::interval<postdate AND NOT deleted;
		UPDATE groups SET stat1 = st1 + t1 ,stat2 = st2 + t2 ,stat3 = st3 + t3 ,stat4 = st4 + t4 WHERE id = grp.id AND ( stat1 != st1 + t1 OR stat2 != st2 + t2 OR stat3 != st3 + t3 OR stat4 != st4 + t4 );
	END LOOP;
	RETURN now;
END;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.stat_update2() OWNER TO maxcom;

--
-- Name: strip(tsvector); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION strip(tsvector) RETURNS tsvector
    AS '$libdir/tsearch2', 'strip'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.strip(tsvector) OWNER TO maxcom;

--
-- Name: syn_init(internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION syn_init(internal) RETURNS internal
    AS '$libdir/tsearch2', 'syn_init'
    LANGUAGE c;


ALTER FUNCTION public.syn_init(internal) OWNER TO maxcom;

--
-- Name: syn_lexize(internal, internal, integer); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION syn_lexize(internal, internal, integer) RETURNS internal
    AS '$libdir/tsearch2', 'syn_lexize'
    LANGUAGE c STRICT;


ALTER FUNCTION public.syn_lexize(internal, internal, integer) OWNER TO maxcom;

--
-- Name: thesaurus_init(internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION thesaurus_init(internal) RETURNS internal
    AS '$libdir/tsearch2', 'thesaurus_init'
    LANGUAGE c;


ALTER FUNCTION public.thesaurus_init(internal) OWNER TO maxcom;

--
-- Name: thesaurus_lexize(internal, internal, integer, internal); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION thesaurus_lexize(internal, internal, integer, internal) RETURNS internal
    AS '$libdir/tsearch2', 'thesaurus_lexize'
    LANGUAGE c STRICT;


ALTER FUNCTION public.thesaurus_lexize(internal, internal, integer, internal) OWNER TO maxcom;

--
-- Name: to_tsquery(oid, text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION to_tsquery(oid, text) RETURNS tsquery
    AS '$libdir/tsearch2', 'to_tsquery'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.to_tsquery(oid, text) OWNER TO maxcom;

--
-- Name: to_tsquery(text, text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION to_tsquery(text, text) RETURNS tsquery
    AS '$libdir/tsearch2', 'to_tsquery_name'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.to_tsquery(text, text) OWNER TO maxcom;

--
-- Name: to_tsquery(text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION to_tsquery(text) RETURNS tsquery
    AS '$libdir/tsearch2', 'to_tsquery_current'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.to_tsquery(text) OWNER TO maxcom;

--
-- Name: to_tsvector(oid, text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION to_tsvector(oid, text) RETURNS tsvector
    AS '$libdir/tsearch2', 'to_tsvector'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.to_tsvector(oid, text) OWNER TO maxcom;

--
-- Name: to_tsvector(text, text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION to_tsvector(text, text) RETURNS tsvector
    AS '$libdir/tsearch2', 'to_tsvector_name'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.to_tsvector(text, text) OWNER TO maxcom;

--
-- Name: to_tsvector(text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION to_tsvector(text) RETURNS tsvector
    AS '$libdir/tsearch2', 'to_tsvector_current'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.to_tsvector(text) OWNER TO maxcom;

--
-- Name: token_type(integer); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION token_type(integer) RETURNS SETOF tokentype
    AS '$libdir/tsearch2', 'token_type'
    LANGUAGE c STRICT;


ALTER FUNCTION public.token_type(integer) OWNER TO maxcom;

--
-- Name: token_type(text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION token_type(text) RETURNS SETOF tokentype
    AS '$libdir/tsearch2', 'token_type_byname'
    LANGUAGE c STRICT;


ALTER FUNCTION public.token_type(text) OWNER TO maxcom;

--
-- Name: token_type(); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION token_type() RETURNS SETOF tokentype
    AS '$libdir/tsearch2', 'token_type_current'
    LANGUAGE c STRICT;


ALTER FUNCTION public.token_type() OWNER TO maxcom;

--
-- Name: topins(); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION topins() RETURNS "trigger"
    AS $$
BEGIN
	UPDATE groups SET stat1=stat1+1,stat2=stat2+1,stat3=stat3+1,stat4=stat4+1 WHERE groups.id = NEW.groupid;
	UPDATE topics SET lastmod=CURRENT_TIMESTAMP WHERE id = NEW.id;
	RETURN NULL;
END;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.topins() OWNER TO maxcom;

--
-- Name: ts_debug(text); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION ts_debug(text) RETURNS SETOF tsdebug
    AS $_$
select 
        m.ts_name,
        t.alias as tok_type,
        t.descr as description,
        p.token,
        m.dict_name,
        strip(to_tsvector(p.token)) as tsvector
from
        parse( _get_parser_from_curcfg(), $1 ) as p,
        token_type() as t,
        pg_ts_cfgmap as m,
        pg_ts_cfg as c
where
        t.tokid=p.tokid and
        t.alias = m.tok_alias and 
        m.ts_name=c.ts_name and 
        c.oid=show_curcfg() 
$_$
    LANGUAGE sql STRICT;


ALTER FUNCTION public.ts_debug(text) OWNER TO maxcom;

--
-- Name: tsearch2(); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsearch2() RETURNS "trigger"
    AS '$libdir/tsearch2', 'tsearch2'
    LANGUAGE c;


ALTER FUNCTION public.tsearch2() OWNER TO maxcom;

--
-- Name: tsq_mcontained(tsquery, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsq_mcontained(tsquery, tsquery) RETURNS boolean
    AS '$libdir/tsearch2', 'tsq_mcontained'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsq_mcontained(tsquery, tsquery) OWNER TO maxcom;

--
-- Name: tsq_mcontains(tsquery, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsq_mcontains(tsquery, tsquery) RETURNS boolean
    AS '$libdir/tsearch2', 'tsq_mcontains'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsq_mcontains(tsquery, tsquery) OWNER TO maxcom;

--
-- Name: tsquery_and(tsquery, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsquery_and(tsquery, tsquery) RETURNS tsquery
    AS '$libdir/tsearch2', 'tsquery_and'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsquery_and(tsquery, tsquery) OWNER TO maxcom;

--
-- Name: tsquery_cmp(tsquery, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsquery_cmp(tsquery, tsquery) RETURNS integer
    AS '$libdir/tsearch2', 'tsquery_cmp'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsquery_cmp(tsquery, tsquery) OWNER TO maxcom;

--
-- Name: tsquery_eq(tsquery, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsquery_eq(tsquery, tsquery) RETURNS boolean
    AS '$libdir/tsearch2', 'tsquery_eq'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsquery_eq(tsquery, tsquery) OWNER TO maxcom;

--
-- Name: tsquery_ge(tsquery, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsquery_ge(tsquery, tsquery) RETURNS boolean
    AS '$libdir/tsearch2', 'tsquery_ge'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsquery_ge(tsquery, tsquery) OWNER TO maxcom;

--
-- Name: tsquery_gt(tsquery, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsquery_gt(tsquery, tsquery) RETURNS boolean
    AS '$libdir/tsearch2', 'tsquery_gt'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsquery_gt(tsquery, tsquery) OWNER TO maxcom;

--
-- Name: tsquery_le(tsquery, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsquery_le(tsquery, tsquery) RETURNS boolean
    AS '$libdir/tsearch2', 'tsquery_le'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsquery_le(tsquery, tsquery) OWNER TO maxcom;

--
-- Name: tsquery_lt(tsquery, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsquery_lt(tsquery, tsquery) RETURNS boolean
    AS '$libdir/tsearch2', 'tsquery_lt'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsquery_lt(tsquery, tsquery) OWNER TO maxcom;

--
-- Name: tsquery_ne(tsquery, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsquery_ne(tsquery, tsquery) RETURNS boolean
    AS '$libdir/tsearch2', 'tsquery_ne'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsquery_ne(tsquery, tsquery) OWNER TO maxcom;

--
-- Name: tsquery_not(tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsquery_not(tsquery) RETURNS tsquery
    AS '$libdir/tsearch2', 'tsquery_not'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsquery_not(tsquery) OWNER TO maxcom;

--
-- Name: tsquery_or(tsquery, tsquery); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsquery_or(tsquery, tsquery) RETURNS tsquery
    AS '$libdir/tsearch2', 'tsquery_or'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsquery_or(tsquery, tsquery) OWNER TO maxcom;

--
-- Name: tsvector_cmp(tsvector, tsvector); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsvector_cmp(tsvector, tsvector) RETURNS integer
    AS '$libdir/tsearch2', 'tsvector_cmp'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsvector_cmp(tsvector, tsvector) OWNER TO maxcom;

--
-- Name: tsvector_eq(tsvector, tsvector); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsvector_eq(tsvector, tsvector) RETURNS boolean
    AS '$libdir/tsearch2', 'tsvector_eq'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsvector_eq(tsvector, tsvector) OWNER TO maxcom;

--
-- Name: tsvector_ge(tsvector, tsvector); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsvector_ge(tsvector, tsvector) RETURNS boolean
    AS '$libdir/tsearch2', 'tsvector_ge'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsvector_ge(tsvector, tsvector) OWNER TO maxcom;

--
-- Name: tsvector_gt(tsvector, tsvector); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsvector_gt(tsvector, tsvector) RETURNS boolean
    AS '$libdir/tsearch2', 'tsvector_gt'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsvector_gt(tsvector, tsvector) OWNER TO maxcom;

--
-- Name: tsvector_le(tsvector, tsvector); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsvector_le(tsvector, tsvector) RETURNS boolean
    AS '$libdir/tsearch2', 'tsvector_le'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsvector_le(tsvector, tsvector) OWNER TO maxcom;

--
-- Name: tsvector_lt(tsvector, tsvector); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsvector_lt(tsvector, tsvector) RETURNS boolean
    AS '$libdir/tsearch2', 'tsvector_lt'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsvector_lt(tsvector, tsvector) OWNER TO maxcom;

--
-- Name: tsvector_ne(tsvector, tsvector); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION tsvector_ne(tsvector, tsvector) RETURNS boolean
    AS '$libdir/tsearch2', 'tsvector_ne'
    LANGUAGE c IMMUTABLE STRICT;


ALTER FUNCTION public.tsvector_ne(tsvector, tsvector) OWNER TO maxcom;

--
-- Name: update_monthly_stats(); Type: FUNCTION; Schema: public; Owner: maxcom
--

CREATE FUNCTION update_monthly_stats() RETURNS timestamp without time zone
    AS $$
begin
delete from monthly_stats;
insert into  monthly_stats ( select section, date_part('year', postdate) as year, date_part('month', postdate) as month, count(topics.id) as c from topics, groups, sections where topics.groupid=groups.id and groups.section=sections.id and topics.moderate and not deleted group by section, year, month);
return CURRENT_TIMESTAMP;
end;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.update_monthly_stats() OWNER TO maxcom;

--
-- Name: rewrite(tsquery[]); Type: AGGREGATE; Schema: public; Owner: maxcom
--

CREATE AGGREGATE rewrite(tsquery[]) (
    SFUNC = rewrite_accum,
    STYPE = tsquery,
    FINALFUNC = rewrite_finish
);


ALTER AGGREGATE public.rewrite(tsquery[]) OWNER TO maxcom;

--
-- Name: !!; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR !! (
    PROCEDURE = tsquery_not,
    RIGHTARG = tsquery
);


ALTER OPERATOR public.!! (NONE, tsquery) OWNER TO maxcom;

--
-- Name: &&; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR && (
    PROCEDURE = tsquery_and,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = &&,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.&& (tsquery, tsquery) OWNER TO maxcom;

--
-- Name: <; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR < (
    PROCEDURE = tsvector_lt,
    LEFTARG = tsvector,
    RIGHTARG = tsvector,
    COMMUTATOR = >,
    NEGATOR = >=,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.< (tsvector, tsvector) OWNER TO maxcom;

--
-- Name: <; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR < (
    PROCEDURE = tsquery_lt,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = >,
    NEGATOR = >=,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.< (tsquery, tsquery) OWNER TO maxcom;

--
-- Name: <=; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR <= (
    PROCEDURE = tsvector_le,
    LEFTARG = tsvector,
    RIGHTARG = tsvector,
    COMMUTATOR = >=,
    NEGATOR = >,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.<= (tsvector, tsvector) OWNER TO maxcom;

--
-- Name: <=; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR <= (
    PROCEDURE = tsquery_le,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = >=,
    NEGATOR = >,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.<= (tsquery, tsquery) OWNER TO maxcom;

--
-- Name: <>; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR <> (
    PROCEDURE = tsvector_ne,
    LEFTARG = tsvector,
    RIGHTARG = tsvector,
    COMMUTATOR = <>,
    NEGATOR = =,
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR public.<> (tsvector, tsvector) OWNER TO maxcom;

--
-- Name: <>; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR <> (
    PROCEDURE = tsquery_ne,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = <>,
    NEGATOR = =,
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);


ALTER OPERATOR public.<> (tsquery, tsquery) OWNER TO maxcom;

--
-- Name: <@; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR <@ (
    PROCEDURE = tsq_mcontained,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = @>,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.<@ (tsquery, tsquery) OWNER TO maxcom;

--
-- Name: =; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR = (
    PROCEDURE = tsvector_eq,
    LEFTARG = tsvector,
    RIGHTARG = tsvector,
    COMMUTATOR = =,
    NEGATOR = <>,
    RESTRICT = eqsel,
    JOIN = eqjoinsel,
    SORT1 = <,
    SORT2 = <,
    LTCMP = <,
    GTCMP = >
);


ALTER OPERATOR public.= (tsvector, tsvector) OWNER TO maxcom;

--
-- Name: =; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR = (
    PROCEDURE = tsquery_eq,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = =,
    NEGATOR = <>,
    RESTRICT = eqsel,
    JOIN = eqjoinsel,
    SORT1 = <,
    SORT2 = <,
    LTCMP = <,
    GTCMP = >
);


ALTER OPERATOR public.= (tsquery, tsquery) OWNER TO maxcom;

--
-- Name: >; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR > (
    PROCEDURE = tsvector_gt,
    LEFTARG = tsvector,
    RIGHTARG = tsvector,
    COMMUTATOR = <,
    NEGATOR = <=,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.> (tsvector, tsvector) OWNER TO maxcom;

--
-- Name: >; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR > (
    PROCEDURE = tsquery_gt,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = <,
    NEGATOR = <=,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.> (tsquery, tsquery) OWNER TO maxcom;

--
-- Name: >=; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR >= (
    PROCEDURE = tsvector_ge,
    LEFTARG = tsvector,
    RIGHTARG = tsvector,
    COMMUTATOR = <=,
    NEGATOR = <,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.>= (tsvector, tsvector) OWNER TO maxcom;

--
-- Name: >=; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR >= (
    PROCEDURE = tsquery_ge,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = <=,
    NEGATOR = <,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.>= (tsquery, tsquery) OWNER TO maxcom;

--
-- Name: @; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR @ (
    PROCEDURE = tsq_mcontains,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = ~,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.@ (tsquery, tsquery) OWNER TO maxcom;

--
-- Name: @>; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR @> (
    PROCEDURE = tsq_mcontains,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = <@,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.@> (tsquery, tsquery) OWNER TO maxcom;

--
-- Name: @@; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR @@ (
    PROCEDURE = rexectsq,
    LEFTARG = tsquery,
    RIGHTARG = tsvector,
    COMMUTATOR = @@,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.@@ (tsquery, tsvector) OWNER TO maxcom;

--
-- Name: @@; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR @@ (
    PROCEDURE = exectsq,
    LEFTARG = tsvector,
    RIGHTARG = tsquery,
    COMMUTATOR = @@,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.@@ (tsvector, tsquery) OWNER TO maxcom;

--
-- Name: @@@; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR @@@ (
    PROCEDURE = rexectsq,
    LEFTARG = tsquery,
    RIGHTARG = tsvector,
    COMMUTATOR = @@@,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.@@@ (tsquery, tsvector) OWNER TO maxcom;

--
-- Name: @@@; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR @@@ (
    PROCEDURE = exectsq,
    LEFTARG = tsvector,
    RIGHTARG = tsquery,
    COMMUTATOR = @@@,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.@@@ (tsvector, tsquery) OWNER TO maxcom;

--
-- Name: ||; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR || (
    PROCEDURE = concat,
    LEFTARG = tsvector,
    RIGHTARG = tsvector
);


ALTER OPERATOR public.|| (tsvector, tsvector) OWNER TO maxcom;

--
-- Name: ||; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR || (
    PROCEDURE = tsquery_or,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = ||,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.|| (tsquery, tsquery) OWNER TO maxcom;

--
-- Name: ~; Type: OPERATOR; Schema: public; Owner: maxcom
--

CREATE OPERATOR ~ (
    PROCEDURE = tsq_mcontained,
    LEFTARG = tsquery,
    RIGHTARG = tsquery,
    COMMUTATOR = @,
    RESTRICT = contsel,
    JOIN = contjoinsel
);


ALTER OPERATOR public.~ (tsquery, tsquery) OWNER TO maxcom;

--
-- Name: gin_tsvector_ops; Type: OPERATOR CLASS; Schema: public; Owner: maxcom
--

CREATE OPERATOR CLASS gin_tsvector_ops
    DEFAULT FOR TYPE tsvector USING gin AS
    STORAGE text ,
    OPERATOR 1 @@(tsvector,tsquery) ,
    OPERATOR 2 @@@(tsvector,tsquery) RECHECK ,
    FUNCTION 1 bttextcmp(text,text) ,
    FUNCTION 2 gin_extract_tsvector(tsvector,internal) ,
    FUNCTION 3 gin_extract_tsquery(tsquery,internal,internal) ,
    FUNCTION 4 gin_ts_consistent(internal,internal,tsquery);


ALTER OPERATOR CLASS public.gin_tsvector_ops USING gin OWNER TO maxcom;

--
-- Name: gist_tp_tsquery_ops; Type: OPERATOR CLASS; Schema: public; Owner: maxcom
--

CREATE OPERATOR CLASS gist_tp_tsquery_ops
    DEFAULT FOR TYPE tsquery USING gist AS
    STORAGE gtsq ,
    OPERATOR 7 @>(tsquery,tsquery) RECHECK ,
    OPERATOR 8 <@(tsquery,tsquery) RECHECK ,
    OPERATOR 13 @(tsquery,tsquery) RECHECK ,
    OPERATOR 14 ~(tsquery,tsquery) RECHECK ,
    FUNCTION 1 gtsq_consistent(gtsq,internal,integer) ,
    FUNCTION 2 gtsq_union(bytea,internal) ,
    FUNCTION 3 gtsq_compress(internal) ,
    FUNCTION 4 gtsq_decompress(internal) ,
    FUNCTION 5 gtsq_penalty(internal,internal,internal) ,
    FUNCTION 6 gtsq_picksplit(internal,internal) ,
    FUNCTION 7 gtsq_same(gtsq,gtsq,internal);


ALTER OPERATOR CLASS public.gist_tp_tsquery_ops USING gist OWNER TO maxcom;

--
-- Name: gist_tsvector_ops; Type: OPERATOR CLASS; Schema: public; Owner: maxcom
--

CREATE OPERATOR CLASS gist_tsvector_ops
    DEFAULT FOR TYPE tsvector USING gist AS
    STORAGE gtsvector ,
    OPERATOR 1 @@(tsvector,tsquery) RECHECK ,
    FUNCTION 1 gtsvector_consistent(gtsvector,internal,integer) ,
    FUNCTION 2 gtsvector_union(internal,internal) ,
    FUNCTION 3 gtsvector_compress(internal) ,
    FUNCTION 4 gtsvector_decompress(internal) ,
    FUNCTION 5 gtsvector_penalty(internal,internal,internal) ,
    FUNCTION 6 gtsvector_picksplit(internal,internal) ,
    FUNCTION 7 gtsvector_same(gtsvector,gtsvector,internal);


ALTER OPERATOR CLASS public.gist_tsvector_ops USING gist OWNER TO maxcom;

--
-- Name: tsquery_ops; Type: OPERATOR CLASS; Schema: public; Owner: maxcom
--

CREATE OPERATOR CLASS tsquery_ops
    DEFAULT FOR TYPE tsquery USING btree AS
    OPERATOR 1 <(tsquery,tsquery) ,
    OPERATOR 2 <=(tsquery,tsquery) ,
    OPERATOR 3 =(tsquery,tsquery) ,
    OPERATOR 4 >=(tsquery,tsquery) ,
    OPERATOR 5 >(tsquery,tsquery) ,
    FUNCTION 1 tsquery_cmp(tsquery,tsquery);


ALTER OPERATOR CLASS public.tsquery_ops USING btree OWNER TO maxcom;

--
-- Name: tsvector_ops; Type: OPERATOR CLASS; Schema: public; Owner: maxcom
--

CREATE OPERATOR CLASS tsvector_ops
    DEFAULT FOR TYPE tsvector USING btree AS
    OPERATOR 1 <(tsvector,tsvector) ,
    OPERATOR 2 <=(tsvector,tsvector) ,
    OPERATOR 3 =(tsvector,tsvector) ,
    OPERATOR 4 >=(tsvector,tsvector) ,
    OPERATOR 5 >(tsvector,tsvector) ,
    FUNCTION 1 tsvector_cmp(tsvector,tsvector);


ALTER OPERATOR CLASS public.tsvector_ops USING btree OWNER TO maxcom;

SET default_tablespace = '';

SET default_with_oids = true;

--
-- Name: b_ips; Type: TABLE; Schema: public; Owner: linuxweb; Tablespace: 
--

CREATE TABLE b_ips (
    ip inet NOT NULL,
    mod_id integer NOT NULL,
    date timestamp with time zone NOT NULL,
    reason character varying(255),
    ban_date timestamp without time zone
);


ALTER TABLE public.b_ips OWNER TO linuxweb;

--
-- Name: TABLE b_ips; Type: COMMENT; Schema: public; Owner: linuxweb
--

COMMENT ON TABLE b_ips IS 'banned ip list table';


--
-- Name: comments; Type: TABLE; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE TABLE comments (
    id integer NOT NULL,
    topic integer NOT NULL,
    userid integer NOT NULL,
    title character varying(255) NOT NULL,
    postdate timestamp with time zone NOT NULL,
    replyto integer,
    deleted boolean DEFAULT false NOT NULL,
    postip inet
);


ALTER TABLE public.comments OWNER TO maxcom;

--
-- Name: del_info; Type: TABLE; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE TABLE del_info (
    msgid integer NOT NULL,
    delby integer NOT NULL,
    reason text
);


ALTER TABLE public.del_info OWNER TO maxcom;

--
-- Name: groups; Type: TABLE; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE TABLE groups (
    id integer NOT NULL,
    title character varying(255) NOT NULL,
    image character varying(255),
    section integer NOT NULL,
    stat1 integer DEFAULT 0 NOT NULL,
    stat2 integer DEFAULT 0 NOT NULL,
    stat3 integer DEFAULT 0 NOT NULL,
    stat4 integer DEFAULT 0 NOT NULL,
    moderator integer,
    restrict_topics integer
);


ALTER TABLE public.groups OWNER TO maxcom;

SET default_with_oids = false;

--
-- Name: ignore_list; Type: TABLE; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE TABLE ignore_list (
    userid integer NOT NULL,
    ignored integer NOT NULL
);


ALTER TABLE public.ignore_list OWNER TO maxcom;

SET default_with_oids = true;

--
-- Name: monthly_stats; Type: TABLE; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE TABLE monthly_stats (
    section integer,
    "year" integer NOT NULL,
    "month" integer NOT NULL,
    c integer NOT NULL
);


ALTER TABLE public.monthly_stats OWNER TO maxcom;

--
-- Name: msgbase; Type: TABLE; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE TABLE msgbase (
    id bigint NOT NULL,
    message text NOT NULL,
    idxfti tsvector
);


ALTER TABLE public.msgbase OWNER TO maxcom;

--
-- Name: topics; Type: TABLE; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE TABLE topics (
    id integer NOT NULL,
    groupid integer NOT NULL,
    userid integer NOT NULL,
    title character varying(255) NOT NULL,
    url character varying(255),
    moderate boolean DEFAULT false NOT NULL,
    postdate timestamp with time zone NOT NULL,
    linktext character varying(255),
    deleted boolean DEFAULT false NOT NULL,
    stat1 integer DEFAULT 0 NOT NULL,
    stat2 integer DEFAULT 0 NOT NULL,
    stat3 integer DEFAULT 0 NOT NULL,
    stat4 integer DEFAULT 0 NOT NULL,
    lastmod timestamp with time zone,
    commitby integer,
    notop boolean,
    commitdate timestamp without time zone,
    postscore integer,
    postip inet,
    sticky boolean DEFAULT false NOT NULL
);


ALTER TABLE public.topics OWNER TO maxcom;

--
-- Name: msgs; Type: VIEW; Schema: public; Owner: maxcom
--

CREATE VIEW msgs AS
    SELECT topics.id, topics.title, topics.postdate, groups.section, topics.userid, NULL::"unknown" AS topic FROM topics, groups WHERE ((NOT topics.deleted) AND (groups.id = topics.groupid));


ALTER TABLE public.msgs OWNER TO maxcom;

--
-- Name: msgs_and_cmts; Type: VIEW; Schema: public; Owner: maxcom
--

CREATE VIEW msgs_and_cmts AS
    SELECT topics.id, topics.title, topics.postdate, groups.section, topics.userid, NULL::"unknown" AS topic FROM topics, groups WHERE ((NOT topics.deleted) AND (groups.id = topics.groupid)) UNION SELECT comments.id, comments.title, comments.postdate, groups.section, comments.userid, comments.topic FROM comments, topics, groups WHERE ((((NOT comments.deleted) AND (NOT topics.deleted)) AND (comments.topic = topics.id)) AND (groups.id = topics.groupid));


ALTER TABLE public.msgs_and_cmts OWNER TO maxcom;

--
-- Name: pg_ts_cfg; Type: TABLE; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE TABLE pg_ts_cfg (
    ts_name text NOT NULL,
    prs_name text NOT NULL,
    locale text
);


ALTER TABLE public.pg_ts_cfg OWNER TO maxcom;

--
-- Name: pg_ts_cfgmap; Type: TABLE; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE TABLE pg_ts_cfgmap (
    ts_name text NOT NULL,
    tok_alias text NOT NULL,
    dict_name text[]
);


ALTER TABLE public.pg_ts_cfgmap OWNER TO maxcom;

--
-- Name: pg_ts_dict; Type: TABLE; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE TABLE pg_ts_dict (
    dict_name text NOT NULL,
    dict_init regprocedure,
    dict_initoption text,
    dict_lexize regprocedure NOT NULL,
    dict_comment text
);


ALTER TABLE public.pg_ts_dict OWNER TO maxcom;

--
-- Name: pg_ts_parser; Type: TABLE; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE TABLE pg_ts_parser (
    prs_name text NOT NULL,
    prs_start regprocedure NOT NULL,
    prs_nexttoken regprocedure NOT NULL,
    prs_end regprocedure NOT NULL,
    prs_headline regprocedure NOT NULL,
    prs_lextype regprocedure NOT NULL,
    prs_comment text
);


ALTER TABLE public.pg_ts_parser OWNER TO maxcom;

--
-- Name: s_guid; Type: SEQUENCE; Schema: public; Owner: maxcom
--

CREATE SEQUENCE s_guid
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.s_guid OWNER TO maxcom;

--
-- Name: s_msg; Type: SEQUENCE; Schema: public; Owner: maxcom
--

CREATE SEQUENCE s_msg
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.s_msg OWNER TO maxcom;

--
-- Name: s_msgid; Type: SEQUENCE; Schema: public; Owner: maxcom
--

CREATE SEQUENCE s_msgid
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.s_msgid OWNER TO maxcom;

--
-- Name: s_uid; Type: SEQUENCE; Schema: public; Owner: maxcom
--

CREATE SEQUENCE s_uid
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.s_uid OWNER TO maxcom;

--
-- Name: sections; Type: TABLE; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE TABLE sections (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    moderate boolean NOT NULL,
    imagepost boolean NOT NULL,
    preformat boolean NOT NULL,
    linkup boolean NOT NULL,
    linktext character varying(255),
    havelink boolean NOT NULL,
    browsable boolean NOT NULL,
    "comment" boolean NOT NULL,
    expire interval NOT NULL,
    lineonly boolean NOT NULL,
    vote boolean DEFAULT false
);


ALTER TABLE public.sections OWNER TO maxcom;

--
-- Name: top10; Type: TABLE; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE TABLE top10 (
    msgid integer NOT NULL,
    mess_order integer,
    CONSTRAINT "$1" CHECK ((mess_order > 0))
);


ALTER TABLE public.top10 OWNER TO maxcom;

--
-- Name: users; Type: TABLE; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE TABLE users (
    id integer NOT NULL,
    name character varying(255),
    nick character varying(80) NOT NULL,
    passwd character varying(40),
    url character varying(255),
    email character varying(255),
    canmod boolean DEFAULT false NOT NULL,
    photo character varying(100),
    town character varying(100),
    candel boolean DEFAULT false NOT NULL,
    lostpwd timestamp with time zone DEFAULT '1970-01-01 03:00:00+03'::timestamp with time zone NOT NULL,
    blocked boolean,
    score integer,
    max_score integer,
    lastlogin timestamp without time zone,
    regdate timestamp without time zone,
    activated boolean DEFAULT false NOT NULL
);


ALTER TABLE public.users OWNER TO maxcom;

--
-- Name: vote_id; Type: SEQUENCE; Schema: public; Owner: maxcom
--

CREATE SEQUENCE vote_id
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.vote_id OWNER TO maxcom;

--
-- Name: votenames; Type: TABLE; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE TABLE votenames (
    id integer NOT NULL,
    title text NOT NULL,
    topic integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.votenames OWNER TO maxcom;

--
-- Name: votes; Type: TABLE; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE TABLE votes (
    id integer NOT NULL,
    vote integer NOT NULL,
    label text NOT NULL,
    votes integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.votes OWNER TO maxcom;

--
-- Name: votes_id; Type: SEQUENCE; Schema: public; Owner: maxcom
--

CREATE SEQUENCE votes_id
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.votes_id OWNER TO maxcom;

--
-- Name: comments_pkey; Type: CONSTRAINT; Schema: public; Owner: maxcom; Tablespace: 
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_pkey PRIMARY KEY (id);


--
-- Name: del_info_pkey; Type: CONSTRAINT; Schema: public; Owner: maxcom; Tablespace: 
--

ALTER TABLE ONLY del_info
    ADD CONSTRAINT del_info_pkey PRIMARY KEY (msgid);


--
-- Name: groups_pkey; Type: CONSTRAINT; Schema: public; Owner: maxcom; Tablespace: 
--

ALTER TABLE ONLY groups
    ADD CONSTRAINT groups_pkey PRIMARY KEY (id);


--
-- Name: ignore_list_pkey; Type: CONSTRAINT; Schema: public; Owner: maxcom; Tablespace: 
--

ALTER TABLE ONLY ignore_list
    ADD CONSTRAINT ignore_list_pkey PRIMARY KEY (userid, ignored);


--
-- Name: msgbase_pkey; Type: CONSTRAINT; Schema: public; Owner: maxcom; Tablespace: 
--

ALTER TABLE ONLY msgbase
    ADD CONSTRAINT msgbase_pkey PRIMARY KEY (id);


--
-- Name: pg_ts_cfg_pkey; Type: CONSTRAINT; Schema: public; Owner: maxcom; Tablespace: 
--

ALTER TABLE ONLY pg_ts_cfg
    ADD CONSTRAINT pg_ts_cfg_pkey PRIMARY KEY (ts_name);


--
-- Name: pg_ts_cfgmap_pkey; Type: CONSTRAINT; Schema: public; Owner: maxcom; Tablespace: 
--

ALTER TABLE ONLY pg_ts_cfgmap
    ADD CONSTRAINT pg_ts_cfgmap_pkey PRIMARY KEY (ts_name, tok_alias);


--
-- Name: pg_ts_dict_pkey; Type: CONSTRAINT; Schema: public; Owner: maxcom; Tablespace: 
--

ALTER TABLE ONLY pg_ts_dict
    ADD CONSTRAINT pg_ts_dict_pkey PRIMARY KEY (dict_name);


--
-- Name: pg_ts_parser_pkey; Type: CONSTRAINT; Schema: public; Owner: maxcom; Tablespace: 
--

ALTER TABLE ONLY pg_ts_parser
    ADD CONSTRAINT pg_ts_parser_pkey PRIMARY KEY (prs_name);


--
-- Name: sections_pkey; Type: CONSTRAINT; Schema: public; Owner: maxcom; Tablespace: 
--

ALTER TABLE ONLY sections
    ADD CONSTRAINT sections_pkey PRIMARY KEY (id);


--
-- Name: top10_pkey; Type: CONSTRAINT; Schema: public; Owner: maxcom; Tablespace: 
--

ALTER TABLE ONLY top10
    ADD CONSTRAINT top10_pkey PRIMARY KEY (msgid);


--
-- Name: users_pkey; Type: CONSTRAINT; Schema: public; Owner: maxcom; Tablespace: 
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: votenames_pkey; Type: CONSTRAINT; Schema: public; Owner: maxcom; Tablespace: 
--

ALTER TABLE ONLY votenames
    ADD CONSTRAINT votenames_pkey PRIMARY KEY (id);


--
-- Name: votes_pkey; Type: CONSTRAINT; Schema: public; Owner: maxcom; Tablespace: 
--

ALTER TABLE ONLY votes
    ADD CONSTRAINT votes_pkey PRIMARY KEY (id);


--
-- Name: bips_ip; Type: INDEX; Schema: public; Owner: linuxweb; Tablespace: 
--

CREATE UNIQUE INDEX bips_ip ON b_ips USING btree (ip);


--
-- Name: comment_author; Type: INDEX; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE INDEX comment_author ON comments USING btree (userid);


--
-- Name: comment_postdate; Type: INDEX; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE INDEX comment_postdate ON comments USING btree (postdate);


--
-- Name: comment_reply; Type: INDEX; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE INDEX comment_reply ON comments USING btree (replyto);


--
-- Name: comment_topic; Type: INDEX; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE INDEX comment_topic ON comments USING btree (topic);


--
-- Name: commit_order; Type: INDEX; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE INDEX commit_order ON topics USING btree (commitdate);


--
-- Name: del_info_delby; Type: INDEX; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE INDEX del_info_delby ON del_info USING btree (delby);


--
-- Name: group_section; Type: INDEX; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE INDEX group_section ON groups USING btree (section);


--
-- Name: i_nick; Type: INDEX; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE UNIQUE INDEX i_nick ON users USING btree (nick);


--
-- Name: i_votes_vote; Type: INDEX; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE INDEX i_votes_vote ON votes USING btree (vote);


--
-- Name: idxfti_idx; Type: INDEX; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE INDEX idxfti_idx ON msgbase USING gin (idxfti);


--
-- Name: topic_author; Type: INDEX; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE INDEX topic_author ON topics USING btree (userid);


--
-- Name: topic_group; Type: INDEX; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE INDEX topic_group ON topics USING btree (groupid);


--
-- Name: topic_postip; Type: INDEX; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE INDEX topic_postip ON topics USING btree (postip);


--
-- Name: topics_date; Type: INDEX; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE INDEX topics_date ON topics USING btree (postdate);


--
-- Name: topics_pkey; Type: INDEX; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE UNIQUE INDEX topics_pkey ON topics USING btree (id);


--
-- Name: votenames_topic_key; Type: INDEX; Schema: public; Owner: maxcom; Tablespace: 
--

CREATE UNIQUE INDEX votenames_topic_key ON votenames USING btree (topic);


--
-- Name: RI_ConstraintTrigger_396601; Type: TRIGGER; Schema: public; Owner: maxcom
--

CREATE CONSTRAINT TRIGGER "<unnamed>"
    AFTER DELETE ON sections
    FROM groups
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_del"('<unnamed>', 'groups', 'sections', 'UNSPECIFIED', 'section', 'id');


--
-- Name: RI_ConstraintTrigger_396602; Type: TRIGGER; Schema: public; Owner: maxcom
--

CREATE CONSTRAINT TRIGGER "<unnamed>"
    AFTER UPDATE ON sections
    FROM groups
    NOT DEFERRABLE INITIALLY IMMEDIATE
    FOR EACH ROW
    EXECUTE PROCEDURE "RI_FKey_noaction_upd"('<unnamed>', 'groups', 'sections', 'UNSPECIFIED', 'section', 'id');


--
-- Name: check_replyto; Type: TRIGGER; Schema: public; Owner: maxcom
--

CREATE TRIGGER check_replyto
    BEFORE INSERT OR UPDATE ON comments
    FOR EACH ROW
    EXECUTE PROCEDURE check_replyto();


--
-- Name: comins_t; Type: TRIGGER; Schema: public; Owner: maxcom
--

CREATE TRIGGER comins_t
    AFTER INSERT ON comments
    FOR EACH ROW
    EXECUTE PROCEDURE comins();


--
-- Name: msgdel_t; Type: TRIGGER; Schema: public; Owner: maxcom
--

CREATE TRIGGER msgdel_t
    AFTER INSERT ON del_info
    FOR EACH ROW
    EXECUTE PROCEDURE msgdel();


--
-- Name: msgins_t; Type: TRIGGER; Schema: public; Owner: maxcom
--

CREATE TRIGGER msgins_t
    BEFORE INSERT OR UPDATE ON msgbase
    FOR EACH ROW
    EXECUTE PROCEDURE msgins();


--
-- Name: topins_t; Type: TRIGGER; Schema: public; Owner: maxcom
--

CREATE TRIGGER topins_t
    AFTER INSERT ON topics
    FOR EACH ROW
    EXECUTE PROCEDURE topins();


--
-- Name: comments_replyto_fkey; Type: FK CONSTRAINT; Schema: public; Owner: maxcom
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_replyto_fkey FOREIGN KEY (replyto) REFERENCES comments(id);


--
-- Name: comments_topic_fkey; Type: FK CONSTRAINT; Schema: public; Owner: maxcom
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_topic_fkey FOREIGN KEY (topic) REFERENCES topics(id);


--
-- Name: comments_userid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: maxcom
--

ALTER TABLE ONLY comments
    ADD CONSTRAINT comments_userid_fkey FOREIGN KEY (userid) REFERENCES users(id);


--
-- Name: del_info_delby_fkey; Type: FK CONSTRAINT; Schema: public; Owner: maxcom
--

ALTER TABLE ONLY del_info
    ADD CONSTRAINT del_info_delby_fkey FOREIGN KEY (delby) REFERENCES users(id);


--
-- Name: groups_section_fkey; Type: FK CONSTRAINT; Schema: public; Owner: maxcom
--

ALTER TABLE ONLY groups
    ADD CONSTRAINT groups_section_fkey FOREIGN KEY (section) REFERENCES sections(id);


--
-- Name: ignore_list_ignored_fkey; Type: FK CONSTRAINT; Schema: public; Owner: maxcom
--

ALTER TABLE ONLY ignore_list
    ADD CONSTRAINT ignore_list_ignored_fkey FOREIGN KEY (ignored) REFERENCES users(id);


--
-- Name: ignore_list_userid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: maxcom
--

ALTER TABLE ONLY ignore_list
    ADD CONSTRAINT ignore_list_userid_fkey FOREIGN KEY (userid) REFERENCES users(id);


--
-- Name: monthly_stats_section_fkey; Type: FK CONSTRAINT; Schema: public; Owner: maxcom
--

ALTER TABLE ONLY monthly_stats
    ADD CONSTRAINT monthly_stats_section_fkey FOREIGN KEY (section) REFERENCES sections(id);


--
-- Name: topics_commitby_fkey; Type: FK CONSTRAINT; Schema: public; Owner: maxcom
--

ALTER TABLE ONLY topics
    ADD CONSTRAINT topics_commitby_fkey FOREIGN KEY (commitby) REFERENCES users(id);


--
-- Name: topics_groupid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: maxcom
--

ALTER TABLE ONLY topics
    ADD CONSTRAINT topics_groupid_fkey FOREIGN KEY (groupid) REFERENCES groups(id);


--
-- Name: topics_userid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: maxcom
--

ALTER TABLE ONLY topics
    ADD CONSTRAINT topics_userid_fkey FOREIGN KEY (userid) REFERENCES users(id);


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Name: b_ips; Type: ACL; Schema: public; Owner: linuxweb
--

REVOKE ALL ON TABLE b_ips FROM PUBLIC;
REVOKE ALL ON TABLE b_ips FROM linuxweb;
GRANT ALL ON TABLE b_ips TO linuxweb;
GRANT SELECT ON TABLE b_ips TO maxcom;


--
-- Name: comments; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON TABLE comments FROM PUBLIC;
REVOKE ALL ON TABLE comments FROM maxcom;
GRANT ALL ON TABLE comments TO maxcom;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE comments TO linuxweb;


--
-- Name: del_info; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON TABLE del_info FROM PUBLIC;
REVOKE ALL ON TABLE del_info FROM maxcom;
GRANT ALL ON TABLE del_info TO maxcom;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE del_info TO linuxweb;


--
-- Name: groups; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON TABLE groups FROM PUBLIC;
REVOKE ALL ON TABLE groups FROM maxcom;
GRANT ALL ON TABLE groups TO maxcom;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE groups TO linuxweb;


--
-- Name: ignore_list; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON TABLE ignore_list FROM PUBLIC;
REVOKE ALL ON TABLE ignore_list FROM maxcom;
GRANT ALL ON TABLE ignore_list TO maxcom;
GRANT ALL ON TABLE ignore_list TO linuxweb;


--
-- Name: monthly_stats; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON TABLE monthly_stats FROM PUBLIC;
REVOKE ALL ON TABLE monthly_stats FROM maxcom;
GRANT ALL ON TABLE monthly_stats TO maxcom;
GRANT SELECT ON TABLE monthly_stats TO linuxweb;


--
-- Name: msgbase; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON TABLE msgbase FROM PUBLIC;
REVOKE ALL ON TABLE msgbase FROM maxcom;
GRANT ALL ON TABLE msgbase TO maxcom;
GRANT SELECT,INSERT,UPDATE ON TABLE msgbase TO linuxweb;


--
-- Name: topics; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON TABLE topics FROM PUBLIC;
REVOKE ALL ON TABLE topics FROM maxcom;
GRANT ALL ON TABLE topics TO maxcom;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE topics TO linuxweb;


--
-- Name: msgs; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON TABLE msgs FROM PUBLIC;
REVOKE ALL ON TABLE msgs FROM maxcom;
GRANT ALL ON TABLE msgs TO maxcom;
GRANT SELECT ON TABLE msgs TO linuxweb;


--
-- Name: msgs_and_cmts; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON TABLE msgs_and_cmts FROM PUBLIC;
REVOKE ALL ON TABLE msgs_and_cmts FROM maxcom;
GRANT ALL ON TABLE msgs_and_cmts TO maxcom;
GRANT SELECT ON TABLE msgs_and_cmts TO linuxweb;


--
-- Name: pg_ts_cfg; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON TABLE pg_ts_cfg FROM PUBLIC;
REVOKE ALL ON TABLE pg_ts_cfg FROM maxcom;
GRANT ALL ON TABLE pg_ts_cfg TO maxcom;
GRANT SELECT ON TABLE pg_ts_cfg TO linuxweb;


--
-- Name: pg_ts_cfgmap; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON TABLE pg_ts_cfgmap FROM PUBLIC;
REVOKE ALL ON TABLE pg_ts_cfgmap FROM maxcom;
GRANT ALL ON TABLE pg_ts_cfgmap TO maxcom;
GRANT SELECT ON TABLE pg_ts_cfgmap TO linuxweb;


--
-- Name: pg_ts_dict; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON TABLE pg_ts_dict FROM PUBLIC;
REVOKE ALL ON TABLE pg_ts_dict FROM maxcom;
GRANT ALL ON TABLE pg_ts_dict TO maxcom;
GRANT SELECT ON TABLE pg_ts_dict TO linuxweb;


--
-- Name: pg_ts_parser; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON TABLE pg_ts_parser FROM PUBLIC;
REVOKE ALL ON TABLE pg_ts_parser FROM maxcom;
GRANT ALL ON TABLE pg_ts_parser TO maxcom;
GRANT SELECT ON TABLE pg_ts_parser TO linuxweb;


--
-- Name: s_guid; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON SEQUENCE s_guid FROM PUBLIC;
REVOKE ALL ON SEQUENCE s_guid FROM maxcom;
GRANT ALL ON SEQUENCE s_guid TO maxcom;
GRANT SELECT,UPDATE ON SEQUENCE s_guid TO linuxweb;


--
-- Name: s_msgid; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON SEQUENCE s_msgid FROM PUBLIC;
REVOKE ALL ON SEQUENCE s_msgid FROM maxcom;
GRANT ALL ON SEQUENCE s_msgid TO maxcom;
GRANT ALL ON SEQUENCE s_msgid TO linuxweb;


--
-- Name: s_uid; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON SEQUENCE s_uid FROM PUBLIC;
REVOKE ALL ON SEQUENCE s_uid FROM maxcom;
GRANT ALL ON SEQUENCE s_uid TO maxcom;
GRANT SELECT,UPDATE ON SEQUENCE s_uid TO linuxweb;


--
-- Name: sections; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON TABLE sections FROM PUBLIC;
REVOKE ALL ON TABLE sections FROM maxcom;
GRANT ALL ON TABLE sections TO maxcom;
GRANT SELECT,DELETE,UPDATE ON TABLE sections TO linuxweb;


--
-- Name: top10; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON TABLE top10 FROM PUBLIC;
REVOKE ALL ON TABLE top10 FROM maxcom;
GRANT ALL ON TABLE top10 TO maxcom;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE top10 TO linuxweb;


--
-- Name: users; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON TABLE users FROM PUBLIC;
REVOKE ALL ON TABLE users FROM maxcom;
GRANT ALL ON TABLE users TO maxcom;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE users TO linuxweb;


--
-- Name: vote_id; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON SEQUENCE vote_id FROM PUBLIC;
REVOKE ALL ON SEQUENCE vote_id FROM maxcom;
GRANT ALL ON SEQUENCE vote_id TO maxcom;
GRANT UPDATE ON SEQUENCE vote_id TO linuxweb;


--
-- Name: votenames; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON TABLE votenames FROM PUBLIC;
REVOKE ALL ON TABLE votenames FROM maxcom;
GRANT ALL ON TABLE votenames TO maxcom;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE votenames TO linuxweb;


--
-- Name: votes; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON TABLE votes FROM PUBLIC;
REVOKE ALL ON TABLE votes FROM maxcom;
GRANT ALL ON TABLE votes TO maxcom;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE votes TO linuxweb;


--
-- Name: votes_id; Type: ACL; Schema: public; Owner: maxcom
--

REVOKE ALL ON SEQUENCE votes_id FROM PUBLIC;
REVOKE ALL ON SEQUENCE votes_id FROM maxcom;
GRANT ALL ON SEQUENCE votes_id TO maxcom;
GRANT UPDATE ON SEQUENCE votes_id TO linuxweb;


--
-- PostgreSQL database dump complete
--

