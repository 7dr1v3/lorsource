<project name="lnxorg" default="dist" xmlns:ivy="antlib:org.apache.ivy.ant">
    <!-- ivy setup -->
    <property name="ivy.version" value="2.0.0"/>
    <property environment="env"/>
    <condition property="ivy.home" value="${env.IVY_HOME}">
        <isset property="env.IVY_HOME"/>
    </condition>
    <property name="ivy.home" value="${user.home}/.ant"/>
    <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy-${ivy.version}.jar"/>
    <property name="lib.dir" value="${basedir}/ivy-lib"/>
    <target name="download-ivy" unless="offline">
        <available file="${ivy.jar.file}" property="ivy.available"/>
        <antcall target="-download-ivy"/>
    </target>

    <target name="-download-ivy" unless="ivy.available">
        <mkdir dir="${ivy.jar.dir}"/>
        <get src="http://www.apache.org/dist/ant/ivy/${ivy.version}/apache-ivy-${ivy.version}-bin.zip"
             dest="${ivy.home}/ivy-${ivy.version}.zip" verbose="on"/>
        <unzip src="${ivy.home}/ivy-${ivy.version}.zip" dest="${ivy.jar.dir}">
            <patternset>
                <include name="**/*.jar"/>
            </patternset>
            <mapper type="flatten"/>
        </unzip>
    </target>

    <target name="init-ivy" depends="download-ivy" unless="ivy.lib.path">
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant"
                 classpathref="ivy.lib.path"/>
    </target>

    <target name="-install-missing" depends="init-ivy">
        <!--ivy:install organisation="com.Danga" module="java_memcached"
                     revision="release_2.0.1" from="provided-libs" to="local" overwrite="true"/-->
    </target>

    <target name="-resolve" depends="-install-missing">
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]"/>
    </target>

    <!-- ivy setup end -->
    <taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>

    <path id="compile.classpath">
        <fileset dir="${lib.dir}/build">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/provided">
            <include name="*.jar"/>
        </fileset>
    </path>
    <target name="init">
        <property name="build" value="build"/>
        <property name="build.test.dir" value="${basedir}/build-test"/>
        <property name="dist" value="dist"/>
        <property name="apidoc" value="docs/apidoc"/>
    </target>

    <target name="prepare" depends="init">
        <mkdir dir="${build}"/>
        <mkdir dir="${build.test.dir}"/>
    </target>

    <target name="build" depends="prepare, -resolve">
        <javac classpathref="compile.classpath" srcdir="src" destdir="${build}" optimize="yes"
               debug="yes" encoding="utf-8" excludes="**/*Test.java"/>
        <copy file="src/logging.properties" todir="${build}"/>
    </target>

     <path id="test.compile.classpath">
        <fileset dir="${lib.dir}/test">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/provided">
            <include name="*.jar"/>
        </fileset>
    </path>

    <target name="build-tests" depends="build">
        <javac srcdir="src" destdir="${build.test.dir}"
               debug="yes" encoding="utf-8" includes="**/*Test.java">
            <classpath>
                <pathelement location="${build}"/>
                <path refid="test.compile.classpath"/>
            </classpath>
        </javac>
    </target>

    <target name="dist" depends="build, unit-tests, js.minify">
        <mkdir dir="${dist}"/>
        <mkdir dir="${dist}/WEB-INF"/>
        <mkdir dir="${dist}/WEB-INF/classes"/>
        <mkdir dir="${dist}/WEB-INF/lib"/>
        <jar jarfile="${dist}/WEB-INF/lib/lnxorgutil.jar" basedir="${build}"
             includes="ru/org/linux/util/*,ru/org/linux/storage/*,ru/org/linux/cache/*,ru/org/linux/boxlet/*,ru/org/linux/logger/*,org/**,com/**"/>
        <jar jarfile="${dist}/WEB-INF/lib/lnxorgsite.jar" basedir="${build}"
             includes="ru/org/linux/site/**,ru/org/linux/spring/**,logging.properties"/>
        <copy todir="${dist}/WEB-INF">
            <fileset dir="web/WEB-INF"/>
        </copy>
        <copy todir="${dist}">
            <fileset dir="web" includes="*.jsp"/>
            <fileset dir="html"/>
        </copy>
        <copy todir="${dist}/WEB-INF/lib">
            <fileset dir="${lib.dir}/build" includes="*.jar"/>
        </copy>
    </target>

    <target name="js.minify" depends="init, -resolve">
        <mkdir dir="${dist}"/>
	<mkdir dir="${dist}/js"/>
	<mkdir dir="${dist}/black"/>
	<mkdir dir="${dist}/tango"/>
	<mkdir dir="${dist}/white"/>
	<mkdir dir="${dist}/white2"/>

	<apply executable="java" parallel="false" verbose="true"
                              dest="${dist}">
             <fileset dir="html">
             	<include name="js/*.js"/>
             </fileset>
             <arg line="-jar"/>
             <arg path="ivy-lib/compile-only/yuicompressor-2.3.6.jar"/>
             <arg line="--type js"/>
             <srcfile/>
             <arg line="-o"/>
             <targetfile/>
             <mapper type="identity"/>
         </apply>

	<concat destfile="${dist}/js/head.js">
		<fileset file="${dist}/js/jquery.form.2.34.min.js"/>
		<fileset file="${dist}/js/jquery.hotkeys-0.7.8-packed.js"/>
		<fileset file="${dist}/js/jquery.validate.pack.js"/>
		<fileset file="${dist}/js/jquery.validate.ru.js"/>
		<fileset file="${dist}/js/highlight.pack.js"/>
	</concat>

	<apply executable="java" parallel="false" verbose="true"
                              dest="${dist}">
             <fileset dir="html" includes="**/*.css"/>
             <arg line="-jar"/>
             <arg path="ivy-lib/compile-only/yuicompressor-2.3.6.jar"/>
             <arg line="--type css"/>
             <srcfile/>
             <arg line="-o"/>
             <targetfile/>
             <mapper type="identity"/>
         </apply>

	<concat destfile="${dist}/tango/combined.css">
		<fileset file="${dist}/tango/syntax.css"/>
		<fileset file="${dist}/tango/reset-fonts-grids.css"/>
		<fileset file="${dist}/tango/style.css"/>
		<fileset file="${dist}/tango/tango-dark.css"/>
	</concat>

	<concat destfile="${dist}/tango/combined-mobile.css">
		<fileset file="${dist}/tango/syntax.css"/>
		<fileset file="${dist}/tango/style-mobile.css"/>
		<fileset file="${dist}/tango/tango-dark.css"/>
	</concat>
	<concat destfile="${dist}/black/combined.css">
		<fileset file="${dist}/black/style.css"/>
		<fileset file="${dist}/black/ir_black.css"/>
	</concat>
	<concat destfile="${dist}/white/combined.css">
		<fileset file="${dist}/white/style.css"/>
		<fileset file="${dist}/white/idea.css"/>
	</concat>
	<concat destfile="${dist}/white2/combined.css">
		<fileset file="${dist}/white2/style.css"/>
		<fileset file="${dist}/white2/idea.css"/>
	</concat>
    </target>

    <target name="doc" depends="build">
        <mkdir dir="docs/api"/>
        <javadoc sourcepath="src" destdir="docs/api" packagenames="ru.org.linux.*" encoding="utf-8"
                 docencoding="utf-8"/>
    </target>

    <target name="clean" depends="init">
        <delete dir="${build}"/>
        <delete dir="${build.test.dir}"/>
        <delete dir="${lib.dir}"/>
        <delete dir="${dist}"/>
        <delete dir="${apidoc}"/>
    </target>

    <target name="unit-tests" depends="build-tests">
        <mkdir dir="test-reports"/>

        <junit fork="yes" haltonfailure="yes" printsummary="yes" dir=".">
            <classpath>
                <path refid="test.compile.classpath"/>
                <pathelement location="${build}"/>
                <pathelement location="${build.test.dir}"/>
            </classpath>
            <formatter type="xml"/>
            <formatter type="brief" usefile="false"/>
            <batchtest todir="test-reports">
                <fileset dir="${build.test.dir}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>
</project>
